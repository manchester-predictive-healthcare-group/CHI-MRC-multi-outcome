data.raw = ebmtcal,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
### Calculate calibration curve using the manually calculated weights and extract the observed event rates
dat.calib.boot.manual <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tp.pred,
curve.type = "rcs",
rcs.nk = 3,
weights = weights.manual,
data.pred.plot = data.pred.plot)
### Write a function which will calculate a calibration curve for state.k for a bootstrapped dataset
calc_obs_boot <- function(data, indices, tp.pred, state.k){
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
### Calculate weights
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
### Calculate calibration curve and extract observed event rates
curve.obs <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = data.boot,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tp.pred.boot,
curve.type = "rcs",
rcs.nk = 3,
weights = weights.manual,
data.pred.plot = data.pred.plot,
transitions.out = state.k)[["plotdata"]][[paste("state", state.k, sep = "")]]$obs
return(curve.obs)
}
### Define alpha for CI's
alpha <- (1-95/100)/2
### Extract what states an individual can move into from state j (states with a non-zero predicted risk)
valid.transitions <- which(colSums(tp.pred) != 0)
### Create dataset for output
plot.data.list <- vector("list", length(valid.transitions))
### Run bootstrapping and create data for plots
for (k in 1:length(valid.transitions)){
### Assign state k
state.k <- valid.transitions[k]
### Run bootstrapping
boot.obs <- boot::boot(ebmtcal, calc_obs_boot, R = 100, tp.pred = tp.pred, state.k = state.k)$t
### Extract confidence bands
lower <- apply(boot.obs, 2, stats::quantile, probs = alpha, na.rm = TRUE)
upper <- apply(boot.obs, 2, stats::quantile, probs = 1-alpha, na.rm = TRUE)
### Assign output
plot.data.list[[k]] <- data.frame(
"pred" = dat.calib.boot.manual[["plotdata"]][[k]]$pred,
"obs" = dat.calib.boot.manual[["plotdata"]][[k]]$obs,
"obs.lower" = lower,
"obs.upper" = upper)
}
### Run bootstrapping and create data for plots
for (k in 1:length(valid.transitions)){
### Assign state k
state.k <- valid.transitions[k]
### Run bootstrapping
boot.obs <- boot::boot(ebmtcal, calc_obs_boot, R = 100, tp.pred = tp.pred, state.k = state.k)$t
### Extract confidence bands
lower <- apply(boot.obs, 2, stats::quantile, probs = alpha, na.rm = TRUE)
upper <- apply(boot.obs, 2, stats::quantile, probs = 1-alpha, na.rm = TRUE)
### Assign output
plot.data.list[[k]] <- data.frame(
"pred" = dat.calib.boot.manual[["plotdata"]][[k]]$pred,
"obs" = dat.calib.boot.manual[["plotdata"]][[k]]$obs,
"obs.lower" = lower,
"obs.upper" = upper)
}
### Create metadata
metadata <- list("valid.transitions"= valid.transitions,
"CI" = 95,
"curve.type" = "rcs")
### Put into same format as
dat.calib.blr <- list("plotdata" = plot.data.list,
"metadata" = metadata)
### Plot
plot(dat.calib.blr)
.libPaths()
library(devtools)
$$$w_{s,t} = \frac{1}{P(t_{cens}|**Z**,**X(t)**)}$$
a <- seq(0.01, 0.99, 0.001)
a <- seq(0.1, 0.9, 0.1)
exp(a)/(1 + exp(a))
log(a/(1-a))
load_all()
data("ebmtcal")
data("msebmtcal")
str(msebmtcal)
devtools::install()
load_all()
data("ebmtcal")
data("msebmtcal")
data("tps0")
data("tps100")
data <- ebmtcal
indices <- 1:nrow(ebmtcal)
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = "")))
library(dpplyr)
library(dplyr)
### Assign tp.pred so it can be bootstrapped
tp.pred <- tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = "")))
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
### Calculate weights
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
load_all()
devtools::load_all()
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
data <- ebmtcal
indices <- 1:nrow(ebmtcal)
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
sum(is.na(weights.manual))
### Calculate weights
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
data <- ebmtcal
indices <- 1:nrow(ebmtcal)
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights.manual))
install.packages("devtools")
install.packages("devtools")
getwd()
load_all()
library(devtools)
load_all()
data("ebmtcal")
data("msebmtcal")
str(msebmtcal)
data("tps0")
data("tps100")
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = t.eval,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)
str(weights1)
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)
str(weights1)
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
str(weights1)
sum(is.na(weights1))
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights1))
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights1))
load_all()
data("ebmtcal")
data("msebmtcal")
str(msebmtcal)
data("tps0")
data("tps100")
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(is.na(weights1))
weights1
weights1 <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("agecl", "year", "proph", "match"),
t.eval = 1826,
s = 0,
landmark.type = "all",
j = 1,
max.weight = 10,
stabilised = FALSE)
View(weights1)
### This should be the individuals uncensored at time t.eval
ids.uncens <- ebmtcal %>% subset(dtcens > t.eval | (dtcens < t.eval & dtcens.s == 0)) %>% dplyr::pull(id)
###
### Step 1: Define the set of predicted risks over which we want to plot the calibration plots
###
t.eval <- 1826
### This should be the individuals uncensored at time t.eval
ids.uncens <- ebmtcal %>% subset(dtcens > t.eval | (dtcens < t.eval & dtcens.s == 0)) %>% dplyr::pull(id)
### Extract the predicted risks  for these individuals
data.pred.plot <- tps0 %>% dplyr::filter(j == 1 & id %in% ids.uncens) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = "")))
### Assign tp.pred so it can be bootstrapped
tp.pred <- tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = "")))
### Calculate inverse probability of censoring weights
### We use the same function that is used internally in calc_calib_blr, but the point of this exercise is to define a function to calculate the weights yourself
### based on knowledge of the clinical settings
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = ebmtcal,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
### Calculate calibration curve using the manually calculated weights and extract the observed event rates
dat.calib.boot.manual <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tp.pred,
curve.type = "rcs",
rcs.nk = 3,
weights = weights.manual,
data.pred.plot = data.pred.plot)
data <- ebmtcal
indices <- sample(1:nrow(ebmtcal), nrow(ebmtcal), replace = TRUE)
state.k <- 6
### Bootstrap dataset and predicted transition probabilities
data.boot <- data[indices,]
tp.pred.boot <- tp.pred[indices, ]
View(data.boot)
### Calculate weights
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 0,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(!is.na(weights.manual))
### Calculate weights
weights.manual <- calc_weights(data.mstate = msebmtcal,
data.raw = data.boot,
covs = c("year", "agecl", "proph", "match"),
t.eval = t.eval,
s = 100,
landmark.type = "state",
j = 1,
max.weight = 10,
stabilised = FALSE)$ipcw
sum(!is.na(weights.manual))
curve.obs <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = data.boot,
j=1,
s=100,
t.eval = t.eval,
tp.pred = tp.pred.boot,
curve.type = "rcs",
rcs.nk = 3,
weights = weights.manual,
data.pred.plot = data.pred.plot,
transitions.out = state.k)[["plotdata"]][[paste("state", state.k, sep = "")]]$obs
devtools::install()
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 100)
Lets produce confidence intervals for the calibration curves of the transition probabilities out of state $j = 1$ at time $s = 0$. The code is predominately the same, except the size of the confidence interval `CI` must be specified, and the number of bootstrap replicates `CI.R.boot`.
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 100)
library(dplyr)
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 100)
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 100)
dat.calib.blr2 <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal,
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
w.stabilised= TRUE,
CI = 95,
CI.R.boot = 100)
str(dat.calib.blr)
str(dat.calib.blr[[6]])
```
```
str(dat.calib.blr[["plotdata"]][[6]])
str(dat.calib.blr2[["plotdata"]][[6]])
plot(dat.calib.blr[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower, dat.calib.blr2[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower)
abline(0,1)
plot(dat.calib.blr[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower, dat.calib.blr2[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower)
abline(0,1)
plot(dat.calib.blr[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower, dat.calib.blr2[["plotdata"]][[6]]$obs.upper - dat.calib.blr[["plotdata"]][[6]]$obs.lower,
xlab = "UNSTABILISED", ylab = "STABILISED")
abline(0,1)
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal[1:500],
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 200)
dat.calib.blr <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal[1:500,],
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 200)
dat.calib.blr.unstab <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal[1:500, ],
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))) %>% slice(1:500),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
CI = 95,
CI.R.boot = 200)
dat.calib.blr.stab <- calc_calib_blr(data.mstate = msebmtcal,
data.raw = ebmtcal[1:500, ],
j=1,
s=0,
t.eval = t.eval,
tp.pred = tps0 %>% dplyr::filter(j == 1) %>% dplyr::select(any_of(paste("pstate", 1:6, sep = ""))) %>% slice(1:500),
curve.type = "rcs",
rcs.nk = 3,
w.covs = c("year", "agecl", "proph", "match"),
w.stabilised= TRUE,
CI = 95,
CI.R.boot = 200)
plot(dat.calib.blr.unstab[["plotdata"]][[6]]$obs.upper - dat.calib.blr.unstab[["plotdata"]][[6]]$obs.lower, dat.calib.blr.stab[["plotdata"]][[6]]$obs.upper - dat.calib.blr.stab[["plotdata"]][[6]]$obs.lower,
xlab = "UNSTABILISED", ylab = "STABILISED")
abline(0,1)
devtools::install()
